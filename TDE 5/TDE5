'''Questão 1
Escreva uma função que receba um número do usuário e divida 100 por esse número.
Utilize exceção para tratar casos onde o número fornecido seja zero ou não seja um número
válido (ou seja, um erro de tipo).'''

def dividir():
try:
n = float(input("Digite um número: "))
print(f"Resultado: {100/n}")
except ZeroDivisionError:
print(f"Erro: divisão por zero não é permitida")
except ValueError:
print(f"Erro: valor inválido, digite um número")

'''Questão 2
Crie uma função que abra um arquivo e leia seu conteúdo. Caso o arquivo não exista, exiba
uma mensagem de erro específica. Caso ocorra outro tipo de erro, exiba uma mensagem
genérica.'''

def ler_arquivo(nome):
try:
with open(nome, "r") as f:
conteudo = f.read()
print(f"Conteúdo: {conteudo}")
except FileNotFoundError:
print(f"Erro: arquivo não encontrado")
except Exception as e:
print(f"Erro inesperado: {e}")

'''Questão 3
Crie uma exceção personalizada chamada ErroIdadeInvalida, que será levantada
quando uma pessoa tentar acessar um serviço com idade menor do que 18 anos. O código
deve lançar essa exceção se a idade for menor e tratá-la para exibir uma mensagem de
erro específica.'''

class ErroIdadeInvalida(Exception):
pass
def verificar_idade(idade):
try:
if idade < 18:
raise ErroIdadeInvalida("Idade menor que 18")
print(f"Acesso permitido")
except ErroIdadeInvalida as e:
print(f"Erro: {e}")

'''Questão 4
Escreva uma função que solicita ao usuário a entrada de uma data (no formato
"dd/mm/yyyy"). Caso o usuário insira uma data inválida ou mal formatada, o programa deve
lançar e tratar a exceção com uma mensagem adequada.'''

from datetime import datetime
def ler_data():
try:
data = input("Digite a data no formato dd/mm/yyyy: ")
datetime.strptime(data, "%d/%m/%Y")
print(f"Data válida: {data}")
except ValueError:
print(f"Erro: formato de data inválido")

'''Questão 5
Escreva um programa que receba múltiplos números inteiros de um usuário até que o
usuário insira um valor não numérico. O programa deve capturar a exceção e exibir um
aviso, mas continuar solicitando os números válidos.'''

def ler_numeros():
while True:
try:
n = int(input("Digite um número inteiro (ou algo não numérico para sair): "))
print(f"Número válido: {n}")
except ValueError:
print(f"Aviso: valor inválido, encerrando entrada")
break

'''Questão 6
Crie uma função que receba dois números e retorne a divisão do primeiro pelo segundo.
Utilize exceções para capturar erros de divisão por zero e de tipo de dado incorreto. A
exceção de tipo de dado incorreto deve ser capturada primeiro.'''

ef dividir_numeros(a,b):
try:
resultado = a/b
print(f"Resultado: {resultado}")
except TypeError:
print(f"Erro: tipo inválido")
except ZeroDivisionError:
print(f"Erro: divisão por zero")

'''Questão 7
Escreva uma função recursiva que pede um número inteiro e calcula o fatorial. Caso o
número não seja válido (não seja um inteiro positivo), deve-se lançar uma exceção
personalizada ValorNaoPositivo.'''

class ValorNaoPositivo(Exception):
pass
def fatorial(n):
try:
if not isinstance(n,int) or n < 0:
raise ValorNaoPositivo("Número inválido, precisa ser inteiro positivo")
if n==0 or n==1:
return 1
return n*fatorial(n-1)
except ValorNaoPositivo as e:
print(f"Erro: {e}")

'''Questão 8
Crie uma função que valide um número de telefone. O número de telefone deve ser
verificado quanto ao seu formato e a exceção deve ser lançada se o formato não for válido
(exemplo: "123-456-7890"). Utilize exceções para indicar que o número é inválido.'''

import re
def validar_telefone(numero):
try:
if not re.fullmatch(r"\d{3}-\d{3}-\d{4}",numero):
raise ValueError("Formato inválido")
print(f"Número válido: {numero}")
except ValueError as e:
print(f"Erro: {e}")

'''Questão 9
Crie uma função que multiplique os elementos de duas listas de números, mas antes de
fazer a multiplicação, verifique se ambas as listas têm o mesmo tamanho. Caso contrário,
lance uma exceção personalizada chamada ListasDeTamanhosDiferentes.'''

class ListasDeTamanhosDiferentes(Exception):
pass
def multiplicar_listas(l1,l2):
try:
if len(l1)!=len(l2):
raise ListasDeTamanhosDiferentes("Listas com tamanhos diferentes")
resultado=[l1[i]*l2[i] for i in range(len(l1))]
print(f"Resultado: {resultado}")
except ListasDeTamanhosDiferentes as e:
print(f"Erro: {e}")

'''Questão 10
Escreva um código que acesse valores em um dicionário baseado em chaves fornecidas
pelo usuário. Utilize exceções para capturar o erro caso o usuário insira uma chave que não
exista.'''

def acessar_dicionario(dic,chave):
try:
print(f"Valor: {dic[chave]}")
except KeyError:
print(f"Erro: chave '{chave}' não encontrada")
